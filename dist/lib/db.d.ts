declare const prisma: import("@prisma/client/runtime/library").DynamicClientExtensionThis<any, any, {
    result: {};
    model: {
        [x: string]: {
            aggregate: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "aggregate">>;
            count: () => <T_1, A_1>(this: T_1, args?: (A_1 extends unknown ? import("@prisma/client/runtime/library").Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy extends A_1 ? { [K in keyof A_1]: import("@prisma/client/runtime/library").Exact<A_1[K], (import("@prisma/client/runtime/library").Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy)[K]>; } : import("@prisma/client/runtime/library").Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy : never) | (A_1 extends import("@prisma/client/runtime/library").Narrowable ? A_1 : never) | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T_1, A_1, "count">>;
            findFirst: () => <T_2, A_2>(this: T_2, args?: (A_2 extends unknown ? import("@prisma/client/runtime/library").Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy extends A_2 ? { [K_1 in keyof A_2]: import("@prisma/client/runtime/library").Exact<A_2[K_1], (import("@prisma/client/runtime/library").Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy)[K_1]>; } : import("@prisma/client/runtime/library").Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy : never) | (A_2 extends import("@prisma/client/runtime/library").Narrowable ? A_2 : never) | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T_2, A_2, "findFirst"> | null>;
            findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: (A_3 extends unknown ? import("@prisma/client/runtime/library").Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy extends A_3 ? { [K_2 in keyof A_3]: import("@prisma/client/runtime/library").Exact<A_3[K_2], (import("@prisma/client/runtime/library").Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy)[K_2]>; } : import("@prisma/client/runtime/library").Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy : never) | (A_3 extends import("@prisma/client/runtime/library").Narrowable ? A_3 : never) | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T_3, A_3, "findFirstOrThrow">>;
            findMany: () => <T_4, A_4>(this: T_4, args?: (A_4 extends unknown ? import("@prisma/client/runtime/library").Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy extends A_4 ? { [K_3 in keyof A_4]: import("@prisma/client/runtime/library").Exact<A_4[K_3], (import("@prisma/client/runtime/library").Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy)[K_3]>; } : import("@prisma/client/runtime/library").Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy : never) | (A_4 extends import("@prisma/client/runtime/library").Narrowable ? A_4 : never) | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T_4, A_4, "findMany">>;
            findUnique: () => <T_5, A_5>(this: T_5, args: import("@prisma/client/runtime/library").Exact<A_5, import("@prisma/client/runtime/library").Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T_5, A_5, "findUnique"> | null>;
            findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: import("@prisma/client/runtime/library").Exact<A_6, import("@prisma/client/runtime/library").Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T_6, A_6, "findUniqueOrThrow">>;
            groupBy: () => <T_7, A_7>(this: T_7, args: import("@prisma/client/runtime/library").Exact<A_7, import("@prisma/client/runtime/library").Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T_7, A_7, "groupBy">>;
        };
        $allModels: {
            aggregate: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "aggregate">>;
            count: () => <T_1, A_1>(this: T_1, args?: (A_1 extends unknown ? import("@prisma/client/runtime/library").Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy extends A_1 ? { [K in keyof A_1]: import("@prisma/client/runtime/library").Exact<A_1[K], (import("@prisma/client/runtime/library").Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy)[K]>; } : import("@prisma/client/runtime/library").Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy : never) | (A_1 extends import("@prisma/client/runtime/library").Narrowable ? A_1 : never) | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T_1, A_1, "count">>;
            findFirst: () => <T_2, A_2>(this: T_2, args?: (A_2 extends unknown ? import("@prisma/client/runtime/library").Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy extends A_2 ? { [K_1 in keyof A_2]: import("@prisma/client/runtime/library").Exact<A_2[K_1], (import("@prisma/client/runtime/library").Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy)[K_1]>; } : import("@prisma/client/runtime/library").Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy : never) | (A_2 extends import("@prisma/client/runtime/library").Narrowable ? A_2 : never) | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T_2, A_2, "findFirst"> | null>;
            findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: (A_3 extends unknown ? import("@prisma/client/runtime/library").Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy extends A_3 ? { [K_2 in keyof A_3]: import("@prisma/client/runtime/library").Exact<A_3[K_2], (import("@prisma/client/runtime/library").Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy)[K_2]>; } : import("@prisma/client/runtime/library").Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy : never) | (A_3 extends import("@prisma/client/runtime/library").Narrowable ? A_3 : never) | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T_3, A_3, "findFirstOrThrow">>;
            findMany: () => <T_4, A_4>(this: T_4, args?: (A_4 extends unknown ? import("@prisma/client/runtime/library").Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy extends A_4 ? { [K_3 in keyof A_4]: import("@prisma/client/runtime/library").Exact<A_4[K_3], (import("@prisma/client/runtime/library").Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy)[K_3]>; } : import("@prisma/client/runtime/library").Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy : never) | (A_4 extends import("@prisma/client/runtime/library").Narrowable ? A_4 : never) | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T_4, A_4, "findMany">>;
            findUnique: () => <T_5, A_5>(this: T_5, args: import("@prisma/client/runtime/library").Exact<A_5, import("@prisma/client/runtime/library").Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T_5, A_5, "findUnique"> | null>;
            findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: import("@prisma/client/runtime/library").Exact<A_6, import("@prisma/client/runtime/library").Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T_6, A_6, "findUniqueOrThrow">>;
            groupBy: () => <T_7, A_7>(this: T_7, args: import("@prisma/client/runtime/library").Exact<A_7, import("@prisma/client/runtime/library").Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T_7, A_7, "groupBy">>;
        };
    };
    query: {};
    client: {};
}>;
export default prisma;
