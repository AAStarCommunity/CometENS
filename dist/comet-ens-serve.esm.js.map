{"version":3,"file":"comet-ens-serve.esm.js","sources":["../src/utils.ts","../lib/db.ts","../lib/utils/query.ts","../src/json.ts","../src/server.ts","../src/index.ts"],"sourcesContent":["export const ETH_COIN_TYPE = 60;\n","import { PrismaClient } from \"@prisma/client\";\nimport { withAccelerate } from \"@prisma/extension-accelerate\";\n\n// Learn more about instantiating PrismaClient in Next.js here: https://www.prisma.io/docs/data-platform/accelerate/getting-started\n\nconst prismaClientSingleton = () => {\n    return new PrismaClient().$extends(withAccelerate());\n};\n\ndeclare const globalThis: {\n    prismaGlobal: ReturnType<typeof prismaClientSingleton>;\n} & typeof global;\n\nconst prisma = globalThis.prismaGlobal ?? prismaClientSingleton();\n\nexport default prisma;\n\nif (process.env.NODE_ENV !== \"production\") globalThis.prismaGlobal = prisma;","import prisma from \"../db\";\n\nexport const getAddress = async (node: string) => {\n    return await prisma.ens.findUnique({\n        // @ts-ignore\n        where: {\n            node: node,\n        },\n        select: {\n            address: true,\n        }\n    });\n}\n\nexport const getText = async (node: string) => {\n    return await prisma.ens.findUnique({\n        // @ts-ignore\n        where: {\n            node: node,\n        },\n        select: {\n            text: true,\n        }\n    });\n}\n\nexport const getContenthash = async (node: string) => {\n    return await prisma.ens.findUnique({\n        // @ts-ignore\n        where: {\n            node: node,\n        },\n        select: {\n            contenthash: true,\n        }\n    });\n}","import { getAddress, getText, getContenthash } from '../lib/utils/query';\n\nconst ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';\nconst EMPTY_CONTENT_HASH = '0x';\nconst ttl = 300;\n\nexport async function addr(name: string, coinType: number) {\n  try {\n    let addresses = await getAddress(name);\n    // @ts-ignore\n    addresses = addresses?.address;\n    let addr = ZERO_ADDRESS;\n    // @ts-ignore\n    if (addresses && addresses[coinType]) {\n      // @ts-ignore\n      addr = '' + addresses[coinType];\n    }\n    return { addr, ttl };\n\n  } catch (e) {\n    return { addr: ZERO_ADDRESS, ttl };\n  }\n}\n\nexport async function text(name: string, key: string) {\n  try {\n    const texts = await getText(name);\n    // @ts-ignore\n    const text = texts?.text;\n\n    // @ts-ignore\n    if (text && text[key]) {   // @ts-ignore\n      return { value: text[key], ttl };\n    } else {\n      return { value: '', ttl };\n    }\n  } catch (e) {\n    return { value: '', ttl };\n  }\n}\n\nexport async function contenthash(name: string) {\n  try {\n    const contenthashRes = await getContenthash(name);\n    // @ts-ignore\n    const contenthash = contenthashRes?.contenthash;\n\n    if (contenthash) {\n      return { contenthash: contenthash, ttl };\n    } else {\n      return { contenthash: EMPTY_CONTENT_HASH, ttl };\n    }\n  } catch (e) {\n    return { contenthash: EMPTY_CONTENT_HASH, ttl };\n  }\n}\n","import { Server } from '@chainlink/ccip-read-server';\nimport { ethers, BytesLike } from 'ethers';\nimport { hexConcat, Result } from 'ethers/lib/utils';\nimport { ETH_COIN_TYPE } from './utils';\nimport { addr as getAddr, text, contenthash as getContentHash } from './json'\nimport { abi as IResolverService_abi } from '@ensdomains/offchain-resolver-contracts/artifacts/contracts/OffchainResolver.sol/IResolverService.json';\nimport { abi as Resolver_abi } from '@ensdomains/ens-contracts/artifacts/contracts/resolvers/Resolver.sol/Resolver.json';\nconst Resolver = new ethers.utils.Interface(Resolver_abi);\n\ninterface DatabaseResult {\n  result: any[];\n  ttl: number;\n}\n\ntype PromiseOrResult<T> = T | Promise<T>;\n\nexport interface Database {\n  addr(\n    name: string,\n    coinType: number\n  ): PromiseOrResult<{ addr: string; ttl: number }>;\n  text(\n    name: string,\n    key: string\n  ): PromiseOrResult<{ value: string; ttl: number }>;\n  contenthash(\n    name: string\n  ): PromiseOrResult<{ contenthash: string; ttl: number }>;\n}\n\nfunction decodeDnsName(dnsname: Buffer) {\n  const labels = [];\n  let idx = 0;\n  while (true) {\n    const len = dnsname.readUInt8(idx);\n    if (len === 0) break;\n    labels.push(dnsname.slice(idx + 1, idx + len + 1).toString('utf8'));\n    idx += len + 1;\n  }\n  return labels.join('.');\n}\n\nconst queryHandlers: {\n  [key: string]: (\n    name: string,\n    args: Result\n  ) => Promise<DatabaseResult>;\n} = {\n  'addr(bytes32)': async (name, _args) => {\n    const { addr, ttl } = await getAddr(name, ETH_COIN_TYPE);\n    return { result: [addr], ttl };\n  },\n  'addr(bytes32,uint256)': async (name, args) => {\n    const { addr, ttl } = await getAddr(name, args[0]);\n    return { result: [addr], ttl };\n  },\n  'text(bytes32,string)': async (name, args) => {\n    const { value, ttl } = await text(name, args[0]);\n\n    return { result: [value], ttl };\n  },\n  'contenthash(bytes32)': async (name, _args) => {\n    const { contenthash, ttl } = await getContentHash(name);\n\n    return { result: [contenthash], ttl };\n  },\n};\n\nasync function query(\n  name: string,\n  data: string\n): Promise<{ result: BytesLike; validUntil: number }> {\n  // Parse the data nested inside the second argument to `resolve`\n  const { signature, args } = Resolver.parseTransaction({ data });\n\n  if (ethers.utils.nameprep(name) !== name) {\n    throw new Error('Name must be normalised');\n  }\n\n  if (ethers.utils.namehash(name) !== args[0]) {\n    throw new Error('Name does not match namehash');\n  }\n\n  const handler = queryHandlers[signature];\n  if (handler === undefined) {\n    throw new Error(`Unsupported query function ${signature}`);\n  }\n\n  const { result, ttl } = await handler(name, args.slice(1));\n\n  return {\n    result: Resolver.encodeFunctionResult(signature, result),\n    validUntil: Math.floor(Date.now() / 1000 + ttl),\n  };\n}\n\nexport function makeServer(signer: ethers.utils.SigningKey) {\n  const server = new Server();\n  server.add(IResolverService_abi, [\n    {\n      type: 'resolve',\n      func: async ([encodedName, data]: Result, request) => {\n        const name = decodeDnsName(Buffer.from(encodedName.slice(2), 'hex'));\n        // Query the database\n        const { result, validUntil } = await query(name, data);\n\n        // Hash and sign the response\n        let messageHash = ethers.utils.solidityKeccak256(\n          ['bytes', 'address', 'uint64', 'bytes32', 'bytes32'],\n          [\n            '0x1900',\n            request?.to,\n            validUntil,\n            ethers.utils.keccak256(request?.data || '0x'),\n            ethers.utils.keccak256(result),\n          ]\n        );\n        const sig = signer.signDigest(messageHash);\n        const sigData = hexConcat([sig.r, sig._vs]);\n\n        return [result, validUntil, sigData];\n      },\n    },\n  ]);\n  return server;\n}\n\nexport function makeApp(\n  signer: ethers.utils.SigningKey,\n  path: string,\n) {\n  return makeServer(signer).makeApp(path);\n}\n","import { makeApp } from './server';\n// import { Command } from 'commander';\n// import { readFileSync } from 'fs';\nimport { ethers } from 'ethers';\n// const program = new Command();\n// program\n//   .requiredOption(\n//     '-k --private-key <key>',\n//     'Private key to sign responses with. Prefix with @ to read from a file'\n//   )\n//   // .requiredOption('-d --data <file>', 'JSON file to read data from')\n//   // .option('-t --ttl <number>', 'TTL for signatures', '300')\n//   .option('-p --port <number>', 'Port number to serve on', '8080');\n// program.parse(process.argv);\n// const options = program.opts();\nlet privateKey = \"0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\";\nconst port = 10000\n// if (privateKey.startsWith('@')) {\n//   privateKey = ethers.utils.arrayify(\n//     readFileSync(privateKey.slice(1), { encoding: 'utf-8' })\n//   );\n// }\nconst address = ethers.utils.computeAddress(privateKey);\nconst signer = new ethers.utils.SigningKey(privateKey);\nconst app = makeApp(signer, '/');\nconsole.log(`Serving on port ${port} with signing address ${address}`);\napp.listen(port);\n"],"names":["ETH_COIN_TYPE","prismaClientSingleton","PrismaClient","$extends","withAccelerate","prisma","_globalThis$prismaGlo","globalThis","prismaGlobal","process","env","NODE_ENV","getAddress","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","node","wrap","_callee$","_context","prev","next","ens","findUnique","where","select","address","abrupt","sent","stop","_x","apply","arguments","getText","_ref2","_callee2","_callee2$","_context2","text","_x2","getContenthash","_ref3","_callee3","_callee3$","_context3","contenthash","_x3","ZERO_ADDRESS","EMPTY_CONTENT_HASH","ttl","addr","_addr","name","coinType","_addresses","addresses","_addr2","t0","_x4","_text","key","texts","_text2","value","_x5","_contenthash","contenthashRes","_contenthash2","Resolver","ethers","utils","Interface","Resolver_abi","decodeDnsName","dnsname","labels","idx","len","readUInt8","push","slice","toString","join","queryHandlers","_addrBytes","_args","_yield$getAddr","getAddr","result","addrBytes32","_addrBytes32Uint","args","_yield$getAddr2","addrBytes32Uint256","_textBytes32String","_yield$text","textBytes32String","_x6","_contenthashBytes","_callee4","_yield$getContentHash","_callee4$","_context4","getContentHash","contenthashBytes32","_x7","_x8","query","_x9","_x10","_query","_callee6","data","_Resolver$parseTransa","signature","handler","_yield$handler","_callee6$","_context6","parseTransaction","nameprep","Error","namehash","undefined","encodeFunctionResult","validUntil","Math","floor","Date","now","makeServer","signer","server","Server","add","IResolverService_abi","type","func","_func","_callee5","request","encodedName","_yield$query","messageHash","sig","sigData","_callee5$","_context5","Buffer","from","solidityKeccak256","to","keccak256","signDigest","hexConcat","r","_vs","_x11","_x12","makeApp","path","privateKey","port","computeAddress","SigningKey","app","console","log","listen"],"mappings":"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"}